import numpy as np

CENTROIDS = [[1.56239637,2.97827301,3.79884724,3.92258144,4.39418638,4.64275149,4.44432009,4.39150982,3.90077128,4.30598689,4.59236135,4.76076099,4.47248894,4.85719991,4.61835522,4.56871565,4.78434644,4.69937165,4.87662666,4.79696746,4.96195779,5.22184257,5.24083647,5.17860693,5.56425217,6.07386149,6.31073695,6.224485,6.54038029,5.97342666,6.17167,6.05360629,6.00673683,6.33282609,6.21490907,6.41306282,6.47750705,6.61985069,7.05361834,6.86296137,6.42405004,6.64212986,6.73224876,6.83866291,7.3283836,7.7816918,7.82933789,7.97285718,8.74130857,8.57108143,9.77996966,9.34515414,10.11827548,10.81803792,11.83704623,12.40759549,13.37376408,14.53150801,13.91491453,14.3434847,15.13787562,17.38358517,18.79880313,21.52245355,22.09009088,22.86810921,23.30746641,23.78641745,24.2432446,24.57347497,24.46673209,23.83499204,23.18106547,24.38137472,25.73440601],[2.42094683,5.46120493,4.78062015,4.63889836,5.00391339,7.26089064,7.30870565,6.76211204,7.37928273,7.63202062,7.54233853,6.40539135,5.80865743,5.85797769,5.94368046,5.81947946,5.87984407,5.87185342,7.14936399,5.70672487,5.58927178,5.8364896,3.93629768,4.0450716,3.69119297,3.56019596,3.5184845,3.52643145,3.25116017,2.11376384,1.87583257,1.81105831,2.06205147,2.07299345,2.08485169,2.05349216,1.59494642,1.67871937,1.6701851,1.63384708,1.77018005,1.77225767,1.8080761,1.75641539,1.79287843,1.75868359,1.7418859,2.24973947,2.84194481,2.82438633,2.51668173,2.36763816,2.75662492,2.80417537,3.54249505,3.35173468,3.17374288,3.48314924,3.57992318,3.68608549,5.91605118,4.10871741,4.9013886,5.11173896,6.2505602,6.60843591,7.97974212,9.45558988,9.92883508,9.9762348,13.67786089,14.05803149,14.93918992,15.76486874,21.89457681],[6.42796535,9.88070109,10.1406667,10.57190397,10.83776276,12.13340625,12.75462366,12.51046193,12.46098863,12.49613159,12.87503367,13.46033349,13.67794167,14.1722004,14.85806714,15.48200542,15.93240984,16.85356874,17.13857784,17.66173307,18.50597325,19.03494646,19.06159158,19.59563039,20.27852089,20.16292367,20.4163014,21.12973361,23.19318378,24.0264528,24.62348582,25.34553701,25.30656185,26.13132903,26.38419077,28.05678374,28.24541508,28.26120332,28.78119631,29.61755038,30.31641592,31.19852316,31.33105513,31.581389,31.69598366,32.11671835,32.34049801,32.36497037,32.55260921,32.44385152,32.68677086,33.03990183,33.16286912,33.34353084,33.55395018,33.54600559,33.96047394,34.13954237,33.97080579,33.94645617,33.97425212,34.13741852,34.06218128,33.33614968,33.10429468,33.1997495,33.36140994,32.76191574,32.79138859,32.87739685,32.68252177,32.72283049,32.41069383,32.52902252,32.68599334],[9.57532715,16.16051765,19.23652007,20.2161215,21.64509271,23.28185706,24.05564318,24.70159548,25.82529001,25.48586016,25.89545444,26.89657039,27.36047477,27.39606324,27.60960815,27.27618398,28.49597127,29.8280129,30.04793456,30.03274714,29.83672298,30.22467661,31.36567359,30.83209212,30.49103543,31.31156161,31.21086578,32.4948721,32.15607327,31.79427856,31.3769034,31.37960275,32.07129995,31.61093459,31.03335847,30.69630468,30.71776551,31.11262995,32.16490809,31.98910591,31.6006671,32.18483163,30.85164926,31.39540579,30.40992059,30.1437755,30.01173537,29.96567918,29.75137948,29.81286582,29.67671552,29.09639165,29.0679076,29.06957483,29.24098318,28.63629957,28.20406197,28.81199006,29.26824623,27.96270588,28.68540551,28.45988751,28.52893019,28.23798815,27.77488227,28.20717765,28.85131046,29.0098883,28.33520804,28.89638048,28.19028754,28.36740185,28.02704614,28.09677214,30.11455362],[1.99150717,2.67843071,2.39256158,3.54335275,1.75647481,3.96590417,4.44890191,4.41526305,4.55088533,4.58978803,5.29000994,5.21596542,5.5046068,5.61625622,5.63825615,5.53237297,5.57506877,5.39855539,5.29029316,5.5083891,5.08366981,5.06642122,1.82200303,1.76261004,1.61588966,1.8486048,1.67149223,0.96924018,0.9428132,0.99365152,0.98475301,0.97735236,0.94207052,0.97815948,0.95610508,0.91273169,0.87606677,0.47859902,0.49162799,0.65103182,1.39667411,0.81652137,1.11523213,1.14067761,3.03786717,10.33866758,13.89926191,15.19764406,13.32249121,15.24519354,21.41817424,25.58353903,25.03820021,27.2570241,30.29944517,32.40524372,32.22034107,32.7881687,33.5675171,31.79204213,34.39938371,33.47260372,33.52299567,30.69356312,30.83734622,33.14670694,30.9555429,30.66113656,32.79479555,32.8102474,32.82430092,32.53248611,33.34443301,33.73775252,34.50442477]]

CENTROIDS_NAME = ["Growing Tests", "Test Erosion", "Progressive Tests", "Stable Tests", "Deferred Tests"]

CENTROIDS_DESCRIPTION = ["The pattern, Growing Tests, appeared in 20.4% of the projects and represents a trajectory of gradual, yet steady, growth in the volume of tests. In these projects, testing efforts accompany code evolution, although more slowly. This behavior may reflect a progressive awareness within the team of the importance of testing as the project matures.", "The Test Erosion pattern, identified in 10% of projects, represents a gradual decline in the proportion of test code over time. This pattern may indicate the removal of existing tests or a failure to maintain the pace of adding new tests as the codebase grows. It raises concerns about software quality maintenance and may be associated with shifting team priorities, technical difficulties, or an overreliance on manual testing.", "The pattern, called Progressive Tests, was the most frequent, present in 37% of the analyzed projects. It is characterized by a constant and consistent growth in the proportion of test code over time, indicating that the team continuously invests in testing as new features are added.", "The pattern Stable Tests, found in 26% of the projects. This pattern shows a high proportion of tests from the beginning of development, which remains stable over time. It suggests a well-structured development process, possibly involving practices such as Test-Driven Development (TDD).", "The Deferred Tests pattern, present in 6.6% of cases, indicates a late introduction of tests in the project lifecycle. After this introduction, a rapid increase in the proportion of test code is observed. This behavior suggests that testing was not prioritized initially and was incorporated only in later phases, possibly after an MVP release or following quality audits."]

def z_normalize(ts):
    """
    Z-normalize the time series data.
    :param ts:
    :return:
    """
    mean_ts = np.mean(ts)
    std_ts = np.std(ts)
    return (ts - mean_ts) / std_ts if std_ts != 0 else ts - mean_ts

def sbd(ts1, ts2):
    """
    Calculate the SBD (Shape-Based Distance) between two time series.
    :param ts1:
    :param ts2:
    :return:
    """
    ts1 = z_normalize(ts1)
    ts2 = z_normalize(ts2)

    xcorr = np.correlate(ts1, ts2, mode='full')
    xcorr_offset = np.argmax(np.abs(xcorr)) - (len(ts2) - 1)

    NCC = xcorr.max() / (len(ts1) * np.std(ts1) * np.std(ts2))

    distance = 1 - NCC

    return distance, xcorr_offset

def get_cluster(timeseries, centroids):
    """
    Get the cluster index for a given time series based on the centroids.
    :param timeseries:
    :param centroids:
    :return:
    """
    timeseries_float_list = list(map(float, timeseries))
    distances = []
    for i in range(len(centroids)):
        distance = sbd(timeseries_float_list, centroids[i])
        distances.append(sbd(timeseries_float_list, distance))

    min_distance = min(distances)
    index = distances.index(min_distance)

    return index